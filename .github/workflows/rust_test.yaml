# Runs our tests
name: test

# only needs to read the code
permissions:
  contents: read

# we run the workflow when we push / open a PR against master
# the reason we do both is that the PR workflow checks your current branch,
# while the on push happens after the code is pushed to master. If you have the
# "require up to date code toggle" enabled, you effectively have the same thing.
on:
  pull_request:
    branches: [master]
  push:
    branches:
      - master

  # just for manual testing
  workflow_dispatch:

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR
# Saves us resources
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu / ${{ matrix.toolchain }}

    # what toolchains will we be using
    strategy:
      matrix:
        toolchain: [stable]

    # any external services we require
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
      # redis:
      #   image: redis
      #   ports:
      #     - "6379:6379"
      #   env:
      #     REDIS_ARGS: "--requirepass password"

    # the steps for our workflow
    steps:
      # checkout our codebase
      - uses: actions/checkout@v5
        with:
          submodules: true

      # caches dependencies and tools
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.1

      # install the correct toolchain
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      # install nextest
      - name: Install nextest
        uses: taiki-e/install-action@nextest

      # generate a lockfile if one does not exist
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      # test our code
      - name: cargo nextest run
        run: cargo nextest run
# uncomment if you have codecov setup in your repos
# coverage:
# use llvm-cov to build and collect coverage and outputs in a format that
# is compatible with codecov.io
#
# note that codecov as of v4 requires that CODECOV_TOKEN from
#
#   https://app.codecov.io/gh/<user or org>/<project>/settings
#
# is set in two places on your repo:
#
# - https://github.com/jonhoo/guardian/settings/secrets/actions
# - https://github.com/jonhoo/guardian/settings/secrets/dependabot
#
# (the former is needed for codecov uploads to work with Dependabot PRs)
#
# PRs coming from forks of your repo will not have access to the token, but
# for those, codecov allows uploading coverage reports without a token.
# it's all a little weird and inconvenient. see
#
#   https://github.com/codecov/feedback/issues/112
#
# for lots of more discussion
# runs-on: ubuntu-latest
# name: ubuntu / stable / coverage
# steps:
#   - uses: actions/checkout@v4
#     with:
#       submodules: true
#   - name: Install stable
#     uses: dtolnay/rust-toolchain@stable
#     with:
#       components: llvm-tools-preview
#   - name: cargo install cargo-llvm-cov
#     uses: taiki-e/install-action@cargo-llvm-cov
#   - name: cargo generate-lockfile
#     if: hashFiles('Cargo.lock') == ''
#     run: cargo generate-lockfile
#   - name: cargo llvm-cov
#     run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
#   - name: Record Rust version
#     run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
#   - name: Upload to codecov.io
#     uses: codecov/codecov-action@v5
#     with:
#       fail_ci_if_error: true
#       token: ${{ secrets.CODECOV_TOKEN }}
#       env_vars: OS,RUST
