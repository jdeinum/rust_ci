# Runs our code checks
name: check

# only needs to need the code
permissions:
  contents: read

# we run the workflow when we push / open a PR against master
# the reason we do both is that the PR workflow checks your current branch,
# while the on push happens after the code is pushed to master. If you have the
# "require up to date code toggle" enabled, you effectively have the same thing.
on:
  pull_request:
    branches: [master]
  push:
    branches:
      - master
  # just for manual testing
  workflow_dispatch:

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR
# Saves us resources
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # The clippy job ensures code quality by checking clippy lints
  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy

    # what toolchains will we be using
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta channels.
        toolchain: [stable, beta]

    # the steps for our workflow
    steps:
      # checkout our codebase
      - uses: actions/checkout@v5
        with:
          submodules: true

      # caches dependencies and tools
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.1

      # install the correct toolchain
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      # run clippy action, which uses reviewdog to post clippy warnings as a PR
      # comment
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: "github-pr-check"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Checks building documentation for your crate
  # can be commented out if not needed
  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      # checkout the code
      - uses: actions/checkout@v5
        with:
          submodules: true

      # caches dependencies and tools
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.1

      # install the nightly toolchain
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly

      # install cargo-docs-rs
      - name: Install cargo-docs-rs
        uses: dtolnay/install@cargo-docs-rs

      # check docs
      - name: cargo docs-rs
        run: cargo docs-rs

  # ensure our code is formatted properly
  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      # checkout the code
      - uses: actions/checkout@v5
        with:
          submodules: true

      # caches dependencies and tools
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.1

      # install the correct toolchain
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      # check code format
      - name: cargo fmt --check
        run: cargo fmt --check
