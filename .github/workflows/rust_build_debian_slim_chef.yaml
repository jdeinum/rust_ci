# Build our app using chef with debian slim as its final image
name: build_debian_slim_chef

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.vars.outputs.image_name }}
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up lowercase owner
        id: vars
        run: |
          echo "image_name=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image_name }}
          tags: |
            type=semver,pattern={{version}}-debian_slim
            type=semver,pattern={{major}}.{{minor}}-debian_slim
            type=semver,pattern={{major}}-debian_slim
            type=ref,event=branch,suffix=-debian_slim
            type=sha,suffix=-debian_slim

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./chef.debian.dockerfile
          push: true
          sbom: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=registry,ref=${{ steps.vars.outputs.image_name }}:buildcache,mode=max
          cache-from: type=registry,ref=${{ steps.vars.outputs.image_name }}:buildcache

  # if you have code scanning enabled
  # security-scan:
  #   needs: docker
  #   uses: ./.github/workflows/trivy.yaml
  #   permissions:
  #     contents: read
  #     security-events: write
  #     packages: read
  #     actions: read
  #   with:
  #     image-name: ${{ needs.docker.outputs.image-name }}:${{ needs.docker.outputs.image-tag }}
